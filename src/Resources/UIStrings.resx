<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ADD_SECRET" xml:space="preserve">
    <value>Add Secret</value>
    <comment>Menu for adding a secret</comment>
  </data>
  <data name="BUTTON_CANCEL" xml:space="preserve">
    <value>Cancel</value>
    <comment>Button text for cancel</comment>
  </data>
  <data name="BUTTON_SAVE" xml:space="preserve">
    <value>Create</value>
    <comment>Button text for save</comment>
  </data>
  <data name="BUTTON_UPDATE" xml:space="preserve">
    <value>Update</value>
    <comment>Button text for update</comment>
  </data>
  <data name="CANCEL_RUN" xml:space="preserve">
    <value>Cancel Run</value>
    <comment>Menu for cancelling a run</comment>
  </data>
  <data name="CONFIRM_DELETE" xml:space="preserve">
    <value>Are you sure you want to delete this secret?</value>
    <comment>Question for deleting an item</comment>
  </data>
  <data name="CONFIRM_DELETE_TITLE" xml:space="preserve">
    <value>Confirm Delete</value>
    <comment>Title bar for confirm delete</comment>
  </data>
  <data name="DELETE_SECRET" xml:space="preserve">
    <value>Delete Secret</value>
    <comment>Menu for deleting a secret</comment>
  </data>
  <data name="EDIT_SECRET" xml:space="preserve">
    <value>Edit Secret</value>
    <comment>Menu for editing a secret</comment>
  </data>
  <data name="GIT_NOT_GITHUB" xml:space="preserve">
    <value>Repo found, but not a github.com</value>
    <comment>For when the git repo is not github.com</comment>
  </data>
  <data name="HEADER_CURRENT_BRANCH" xml:space="preserve">
    <value>Current Branch</value>
    <comment>Current Branch text formatted with current branch</comment>
  </data>
  <data name="HEADER_ENVIRONMENTS" xml:space="preserve">
    <value>Environments</value>
    <comment>Header for environments</comment>
  </data>
  <data name="HEADER_REPO_SECRETS" xml:space="preserve">
    <value>Repository Secrets</value>
    <comment>Header for repo secrets</comment>
  </data>
  <data name="HEADER_SECRETS" xml:space="preserve">
    <value>Secrets</value>
    <comment>Header for secrets</comment>
  </data>
  <data name="HEADER_SETTINGS" xml:space="preserve">
    <value>Settings</value>
    <comment>Settings expander header</comment>
  </data>
  <data name="HEADER_WORKFLOWS" xml:space="preserve">
    <value>Workflows</value>
    <comment>Header for workflow top-level node</comment>
  </data>
  <data name="LABEL_NAME" xml:space="preserve">
    <value>Name:</value>
    <comment>Label for secret form for name</comment>
  </data>
  <data name="LABEL_SECRET" xml:space="preserve">
    <value>Secret:</value>
    <comment>Label for secret form for secret</comment>
  </data>
  <data name="NO_ENV" xml:space="preserve">
    <value>No environments defined</value>
    <comment>For when no environments defined</comment>
  </data>
  <data name="NO_GIT_REPO" xml:space="preserve">
    <value>No git repo found</value>
    <comment>For when no git repo is found</comment>
  </data>
  <data name="NO_PROJ_LOADED" xml:space="preserve">
    <value>No project or solution loaded</value>
    <comment>For when no project is loaded</comment>
  </data>
  <data name="NO_REPO_SECRETS" xml:space="preserve">
    <value>No repository secrets defined</value>
    <comment>For when no repo secrets defined</comment>
  </data>
  <data name="NO_WORKFLOW_RUNS" xml:space="preserve">
    <value>No workflow runs found for query</value>
    <comment>For when no workload runs are found</comment>
  </data>
  <data name="RUN_WORKFLOW" xml:space="preserve">
    <value>Run Workflow</value>
    <comment>Menu for running a workflow</comment>
  </data>
  <data name="TRIGGERED_BY" xml:space="preserve">
    <value>by</value>
    <comment>Message separating event and actor - requries spaces</comment>
  </data>
  <data name="TRIGGERED_VIA" xml:space="preserve">
    <value>Triggered via</value>
    <comment>Message starting the trigger sentence</comment>
  </data>
  <data name="VIEW_LOG" xml:space="preserve">
    <value>View Log</value>
    <comment>Menu for viewing a log</comment>
  </data>
</root>